def Z = fun (f) => (fun (x) => x(x))(fun (x) => f(fun (y) => ((x(x))(y))))
def G = fun(f) => fun(n) => if n=0 then 1 else n*f(n-1);
def yfac = Z(G);

def fac1(N) =
    let rec =
        fun(f) => fun(n) => if n=0 then 1 else n*(f(f))(n-1)
    in
        (rec(rec))(N)

def fac2(n) = if n=0 then 1 else n*fac2(n-1)

def last = 1

